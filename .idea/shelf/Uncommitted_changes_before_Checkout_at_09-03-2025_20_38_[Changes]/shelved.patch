Index: app/src/main/java/com/example/taskmanagerapp/ui/screens/list/ListContent.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>@file:OptIn(ExperimentalMaterial3Api::class)\r\n\r\npackage com.example.taskmanagerapp.ui.screens.list\r\n\r\nimport android.annotation.SuppressLint\r\nimport androidx.compose.animation.AnimatedVisibility\r\nimport androidx.compose.animation.core.animateFloatAsState\r\nimport androidx.compose.animation.core.tween\r\nimport androidx.compose.animation.expandVertically\r\nimport androidx.compose.animation.shrinkHorizontally\r\nimport androidx.compose.foundation.Canvas\r\nimport androidx.compose.foundation.background\r\nimport androidx.compose.foundation.layout.*\r\nimport androidx.compose.foundation.lazy.LazyColumn\r\nimport androidx.compose.foundation.lazy.items\r\nimport androidx.compose.material.*\r\nimport androidx.compose.material.icons.Icons\r\nimport androidx.compose.material.icons.rounded.Delete\r\nimport androidx.compose.material3.*\r\nimport androidx.compose.runtime.*\r\nimport androidx.compose.ui.Alignment\r\nimport androidx.compose.ui.Modifier\r\nimport androidx.compose.ui.draw.rotate\r\nimport androidx.compose.ui.graphics.Color\r\nimport androidx.compose.ui.text.font.FontWeight\r\nimport androidx.compose.ui.text.style.TextOverflow\r\nimport androidx.compose.ui.tooling.preview.Preview\r\nimport androidx.compose.ui.unit.dp\r\nimport com.example.taskmanagerapp.data.models.Priority\r\nimport com.example.taskmanagerapp.data.models.TaskEntity\r\nimport com.example.taskmanagerapp.ui.theme.*\r\nimport com.example.taskmanagerapp.utils.Actions\r\nimport com.example.taskmanagerapp.utils.RequestState\r\nimport com.example.taskmanagerapp.utils.SearchAppBarState\r\nimport kotlinx.coroutines.delay\r\nimport kotlinx.coroutines.launch\r\n\r\n@Composable\r\nfun ListContent(\r\n    allTasks: RequestState<List<TaskEntity>>,\r\n    lowPriorityTasks: List<TaskEntity>,\r\n    highPriorityTasks: List<TaskEntity>,\r\n    sortState: RequestState<Priority>,\r\n    searchedTasks: RequestState<List<TaskEntity>>,\r\n    onSwipeToDelete: (Actions, TaskEntity) -> Unit,\r\n    navigateToTaskScreen: (taskId: Int) -> Unit,\r\n    searchAppBarState: SearchAppBarState\r\n) {\r\n    if (sortState is RequestState.Success) {\r\n        when {\r\n            searchAppBarState == SearchAppBarState.TRIGGERED -> {\r\n                if (searchedTasks is RequestState.Success) {\r\n                    HandleListContent(\r\n                        tasks = searchedTasks.data,\r\n                        navigateToTaskScreen = navigateToTaskScreen,\r\n                        onSwipeToDelete = onSwipeToDelete\r\n                    )\r\n                } else if (searchedTasks is RequestState.Loading) {\r\n                    CircularProgressIndicator()\r\n                }\r\n            }\r\n\r\n            sortState.data == Priority.NONE -> {\r\n                if (allTasks is RequestState.Success) {\r\n                    HandleListContent(\r\n                        tasks = allTasks.data,\r\n                        navigateToTaskScreen = navigateToTaskScreen,\r\n                        onSwipeToDelete = onSwipeToDelete\r\n                    )\r\n                } else if (allTasks is RequestState.Loading) {\r\n                    CircularProgressIndicator()\r\n                }\r\n            }\r\n\r\n            sortState.data == Priority.HIGH -> {\r\n                HandleListContent(\r\n                    tasks = highPriorityTasks,\r\n                    navigateToTaskScreen = navigateToTaskScreen,\r\n                    onSwipeToDelete = onSwipeToDelete\r\n                )\r\n            }\r\n\r\n            sortState.data == Priority.LOW -> {\r\n                HandleListContent(\r\n                    tasks = lowPriorityTasks,\r\n                    navigateToTaskScreen = navigateToTaskScreen,\r\n                    onSwipeToDelete = onSwipeToDelete\r\n                )\r\n            }\r\n        }\r\n    }\r\n\r\n}\r\n\r\n@SuppressLint(\"CoroutineCreationDuringComposition\")\r\n@OptIn(ExperimentalMaterial3Api::class)\r\n@Composable\r\nfun HandleListContent(\r\n    tasks: List<TaskEntity>,\r\n    onSwipeToDelete: (Actions, TaskEntity) -> Unit,\r\n    navigateToTaskScreen: (taskId: Int) -> Unit\r\n) {\r\n    if (tasks.isEmpty()) {\r\n        EmptyContent()\r\n    } else {\r\n        LazyColumn {\r\n            items(\r\n                items = tasks,\r\n                key = { item ->\r\n                    item.id\r\n                }\r\n            ) { task ->\r\n                val dismissState = rememberDismissState()\r\n                val dismissDirection = dismissState.dismissDirection\r\n                val isDismissed = dismissState.isDismissed(DismissDirection.EndToStart)\r\n                if (isDismissed && dismissDirection == DismissDirection.EndToStart) {\r\n                    val scope = rememberCoroutineScope()\r\n                    scope.launch {\r\n                        // reason for this delay is bc our animations are 300ms long\r\n                        delay(300)\r\n                        onSwipeToDelete(Actions.DELETE, task)\r\n                    }\r\n                }\r\n\r\n                val degrees by animateFloatAsState(\r\n                    if (dismissState.targetValue == DismissValue.Default) 0f\r\n                    else -45f\r\n                )\r\n                var itemAppeared by remember{\r\n                    mutableStateOf(false)\r\n                }\r\n                LaunchedEffect(key1 = true){\r\n                    itemAppeared = true\r\n                }\r\n\r\n                AnimatedVisibility(\r\n                    visible = itemAppeared && !isDismissed, // this parameter tells if the content should be visible\r\n                    enter = expandVertically(\r\n                        animationSpec = tween(300)\r\n                    ),\r\n                    exit = shrinkHorizontally (\r\n                        animationSpec = tween(300)\r\n                    )\r\n                ) {\r\n                    SwipeToDismiss(\r\n                        state = dismissState,\r\n                        directions = setOf(DismissDirection.EndToStart),\r\n                        background = { RedBackground(degrees = degrees) },\r\n                        dismissContent = {\r\n                            TaskItem(\r\n                                task = task,\r\n                                navigateToTaskScreen = navigateToTaskScreen\r\n                            )\r\n                        }\r\n                    )\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n@Composable\r\nfun RedBackground(degrees: Float) {\r\n    Box(\r\n        modifier = Modifier\r\n            .fillMaxSize()\r\n            .background(HighPriorityColor)\r\n            .padding(horizontal = 24.dp),\r\n        contentAlignment = Alignment.CenterEnd\r\n    ) {\r\n        Icon(\r\n            modifier = Modifier.rotate(degrees),\r\n            imageVector = Icons.Rounded.Delete,\r\n            contentDescription = \"Delete Icon\",\r\n            tint = Color.White\r\n        )\r\n    }\r\n}\r\n\r\n@Composable\r\nfun TaskItem(\r\n    task: TaskEntity,\r\n    navigateToTaskScreen: (taskId: Int) -> Unit\r\n) {\r\n    Surface(\r\n        modifier = Modifier\r\n            .fillMaxWidth(),\r\n        color = MaterialTheme.colorScheme.taskItemBackGroundColor,\r\n        shadowElevation = 2.dp,\r\n        onClick = {\r\n            navigateToTaskScreen(task.id)\r\n        }\r\n    ) {\r\n        Column(\r\n            modifier = Modifier\r\n                .padding(12.dp)\r\n                .fillMaxWidth()\r\n        ) {\r\n            Row {\r\n                Text(\r\n                    modifier = Modifier.weight(9f),\r\n                    text = task.title,\r\n                    color = MaterialTheme.colorScheme.taskItemTextColor,\r\n                    style = MaterialTheme.typography.headlineSmall,\r\n                    fontWeight = FontWeight.Bold,\r\n                    maxLines = 1,\r\n                )\r\n\r\n                Box(\r\n                    modifier = Modifier\r\n                        .fillMaxWidth()\r\n                        .weight(1f),\r\n                    contentAlignment = Alignment.TopEnd\r\n                ) {\r\n                    Canvas(\r\n                        modifier = Modifier\r\n                            .size(16.dp)\r\n                    ) {\r\n                        drawCircle(color = task.priority.color)\r\n                    }\r\n                }\r\n            }\r\n            Text(\r\n                modifier = Modifier\r\n                    .fillMaxWidth()\r\n                    .padding(top = 8.dp),\r\n                text = task.description,\r\n                color = MaterialTheme.colorScheme.taskItemTextColor,\r\n                style = MaterialTheme.typography.bodyMedium,\r\n                overflow = TextOverflow.Ellipsis,\r\n                maxLines = 2\r\n            )\r\n        }\r\n    }\r\n}\r\n\r\n@Preview\r\n@Composable\r\nfun TaskItemPreview() {\r\n    TaskItem(task = TaskEntity(\r\n        title = \"task1\",\r\n        priority = Priority.NONE,\r\n        description = \"task 1 should be completed\",\r\n        id = 1\r\n    ), navigateToTaskScreen = {})\r\n}\r\n\r\n@Composable\r\n@Preview\r\nprivate fun RedBackgroundPreview() {\r\n    Column(modifier = Modifier.height(80.dp)) {\r\n        RedBackground(degrees = 0f)\r\n    }\r\n}
===================================================================
diff --git a/app/src/main/java/com/example/taskmanagerapp/ui/screens/list/ListContent.kt b/app/src/main/java/com/example/taskmanagerapp/ui/screens/list/ListContent.kt
--- a/app/src/main/java/com/example/taskmanagerapp/ui/screens/list/ListContent.kt	
+++ b/app/src/main/java/com/example/taskmanagerapp/ui/screens/list/ListContent.kt	
@@ -241,6 +241,7 @@
         title = "task1",
         priority = Priority.NONE,
         description = "task 1 should be completed",
+        date = "due date",
         id = 1
     ), navigateToTaskScreen = {})
 }
Index: app/src/main/java/com/example/taskmanagerapp/ui/screens/task/TaskAppBar.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.taskmanagerapp.ui.screens.task\r\n\r\nimport androidx.compose.material.icons.Icons\r\nimport androidx.compose.material.icons.rounded.ArrowBack\r\nimport androidx.compose.material.icons.rounded.Check\r\nimport androidx.compose.material.icons.rounded.Close\r\nimport androidx.compose.material.icons.rounded.Delete\r\nimport androidx.compose.material3.ExperimentalMaterial3Api\r\nimport androidx.compose.material3.Icon\r\nimport androidx.compose.material3.IconButton\r\nimport androidx.compose.material3.MaterialTheme\r\nimport androidx.compose.material3.Text\r\nimport androidx.compose.material3.TopAppBar\r\nimport androidx.compose.material3.TopAppBarDefaults\r\nimport androidx.compose.runtime.Composable\r\nimport androidx.compose.runtime.getValue\r\nimport androidx.compose.runtime.mutableStateOf\r\nimport androidx.compose.runtime.remember\r\nimport androidx.compose.runtime.setValue\r\nimport androidx.compose.ui.res.stringResource\r\nimport androidx.compose.ui.text.style.TextOverflow\r\nimport androidx.compose.ui.tooling.preview.Preview\r\nimport com.example.taskmanagerapp.R\r\nimport com.example.taskmanagerapp.components.DisplayAlertDialog\r\nimport com.example.taskmanagerapp.data.models.Priority\r\nimport com.example.taskmanagerapp.data.models.TaskEntity\r\nimport com.example.taskmanagerapp.ui.theme.topAppBarBackgroundColor\r\nimport com.example.taskmanagerapp.ui.theme.topAppBarContentColor\r\nimport com.example.taskmanagerapp.utils.Actions\r\n\r\n@Composable\r\nfun TaskAppBar(\r\n    selectedTask: TaskEntity?,\r\n    navigateToListScreen: (Actions) -> Unit\r\n) {\r\n    if (selectedTask == null) {\r\n        NewTaskAppBar(navigateToListScreen = navigateToListScreen)\r\n    } else {\r\n        ExistingTaskAppBar(\r\n            selectedTask = selectedTask,\r\n            navigateToListScreen = navigateToListScreen\r\n        )\r\n    }\r\n}\r\n\r\n\r\n@OptIn(ExperimentalMaterial3Api::class)\r\n@Composable\r\nfun NewTaskAppBar(\r\n    navigateToListScreen: (Actions) -> Unit\r\n) {\r\n    TopAppBar(\r\n        navigationIcon = {\r\n            BackAction(onBackClicked = navigateToListScreen)\r\n        },\r\n        title = {\r\n            Text(\r\n                text = \"Add Task\",\r\n                color = MaterialTheme.colorScheme.topAppBarContentColor\r\n            )\r\n        },\r\n        colors = TopAppBarDefaults.smallTopAppBarColors(\r\n            containerColor = MaterialTheme\r\n                .colorScheme\r\n                .topAppBarBackgroundColor\r\n        ),\r\n        actions = {\r\n            AddAction(onAddClicked = navigateToListScreen)\r\n        }\r\n\r\n    )\r\n}\r\n\r\n\r\n@Composable\r\nfun BackAction(\r\n    onBackClicked: (Actions) -> Unit\r\n) {\r\n    IconButton(onClick = { onBackClicked(Actions.NO_ACTION) }) {\r\n        Icon(\r\n            imageVector = Icons.Rounded.ArrowBack,\r\n            contentDescription = \"Back Action\",\r\n            tint = MaterialTheme.colorScheme.topAppBarContentColor\r\n        )\r\n    }\r\n}\r\n\r\n@Composable\r\nfun AddAction(\r\n    onAddClicked: (Actions) -> Unit\r\n) {\r\n    IconButton(onClick = { onAddClicked(Actions.ADD) }) {\r\n        Icon(\r\n            imageVector = Icons.Rounded.Check,\r\n            contentDescription = \"Add Task\",\r\n            tint = MaterialTheme.colorScheme.topAppBarContentColor\r\n        )\r\n    }\r\n}\r\n\r\n@OptIn(ExperimentalMaterial3Api::class)\r\n@Composable\r\nfun ExistingTaskAppBar(\r\n    selectedTask: TaskEntity,\r\n    navigateToListScreen: (Actions) -> Unit\r\n) {\r\n    TopAppBar(\r\n        navigationIcon = {\r\n            CloseAction(onCloseClicked = navigateToListScreen)\r\n        },\r\n        title = {\r\n            Text(\r\n                text = selectedTask.title,\r\n                color = MaterialTheme.colorScheme.topAppBarContentColor,\r\n                maxLines = 1,\r\n                overflow = TextOverflow.Ellipsis\r\n            )\r\n        },\r\n        colors = TopAppBarDefaults.smallTopAppBarColors(\r\n            containerColor = MaterialTheme\r\n                .colorScheme\r\n                .topAppBarBackgroundColor\r\n        ),\r\n        actions = {\r\n            ExistingAppBarActions(selectedTask = selectedTask,\r\n                navigateToListScreen = navigateToListScreen )\r\n        }\r\n\r\n    )\r\n}\r\n\r\n@Composable\r\nfun CloseAction(\r\n    onCloseClicked: (Actions) -> Unit\r\n) {\r\n    IconButton(onClick = { onCloseClicked(Actions.NO_ACTION) }) {\r\n        Icon(\r\n            imageVector = Icons.Rounded.Close,\r\n            contentDescription = \"Close Action\",\r\n            tint = MaterialTheme.colorScheme.topAppBarContentColor\r\n        )\r\n\r\n    }\r\n}\r\n\r\n@Composable\r\nfun ExistingAppBarActions(\r\n    selectedTask: TaskEntity,\r\n    navigateToListScreen: (Actions) -> Unit,\r\n\r\n    ) {\r\n    var openDialog by remember { mutableStateOf(false) }\r\n    DisplayAlertDialog(\r\n        title = stringResource(\r\n            id = R.string.delete_task,\r\n            selectedTask.title\r\n        ),\r\n        message = stringResource(\r\n            id = R.string.delete_task_confirmation,\r\n            selectedTask.title\r\n        ),\r\n        openDialog = openDialog,\r\n        closeDialog = { openDialog = false },\r\n        onYesSelected = {navigateToListScreen(Actions.DELETE)}\r\n    )\r\n\r\n    DeleteAction(onDeleteClicked = {\r\n        openDialog = true\r\n    })\r\n    UpdateAction(onUpdateClicked = navigateToListScreen)\r\n}\r\n\r\n@Composable\r\nfun DeleteAction(\r\n    onDeleteClicked: () -> Unit\r\n) {\r\n    IconButton(onClick = { onDeleteClicked() }) {\r\n        Icon(\r\n            imageVector = Icons.Rounded.Delete,\r\n            contentDescription = \"Delete Action\",\r\n            tint = MaterialTheme.colorScheme.topAppBarContentColor\r\n        )\r\n    }\r\n}\r\n\r\n@Composable\r\nfun UpdateAction(\r\n    onUpdateClicked: (Actions) -> Unit\r\n) {\r\n    IconButton(onClick = { onUpdateClicked(Actions.UPDATE) }) {\r\n        Icon(\r\n            imageVector = Icons.Rounded.Check,\r\n            contentDescription = \"Update Action\",\r\n            tint = MaterialTheme.colorScheme.topAppBarContentColor\r\n        )\r\n\r\n    }\r\n}\r\n\r\n@Preview\r\n@Composable\r\nfun PreviewNewTaskAppBar() {\r\n    NewTaskAppBar(navigateToListScreen = {})\r\n}\r\n\r\n\r\n@Preview\r\n@Composable\r\nfun PreviewExistingTaskAppBar() {\r\n    ExistingTaskAppBar(\r\n        navigateToListScreen = {},\r\n        selectedTask = TaskEntity(0, \"something\", \"nothing\", Priority.HIGH)\r\n    )\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n
===================================================================
diff --git a/app/src/main/java/com/example/taskmanagerapp/ui/screens/task/TaskAppBar.kt b/app/src/main/java/com/example/taskmanagerapp/ui/screens/task/TaskAppBar.kt
--- a/app/src/main/java/com/example/taskmanagerapp/ui/screens/task/TaskAppBar.kt	
+++ b/app/src/main/java/com/example/taskmanagerapp/ui/screens/task/TaskAppBar.kt	
@@ -209,7 +209,7 @@
 fun PreviewExistingTaskAppBar() {
     ExistingTaskAppBar(
         navigateToListScreen = {},
-        selectedTask = TaskEntity(0, "something", "nothing", Priority.HIGH)
+        selectedTask = TaskEntity(0, "something", "nothing", Priority.HIGH, "due date")
     )
 }
 
