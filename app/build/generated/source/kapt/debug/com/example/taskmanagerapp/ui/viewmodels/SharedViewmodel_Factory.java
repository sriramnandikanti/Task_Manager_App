// Generated by Dagger (https://dagger.dev).
package com.example.taskmanagerapp.ui.viewmodels;

import com.example.taskmanagerapp.data.repository.DataStoreRepository;
import com.example.taskmanagerapp.data.repository.TaskRepository;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class SharedViewmodel_Factory implements Factory<SharedViewmodel> {
  private final Provider<TaskRepository> repositoryProvider;

  private final Provider<DataStoreRepository> dataStoreRepositoryProvider;

  public SharedViewmodel_Factory(Provider<TaskRepository> repositoryProvider,
      Provider<DataStoreRepository> dataStoreRepositoryProvider) {
    this.repositoryProvider = repositoryProvider;
    this.dataStoreRepositoryProvider = dataStoreRepositoryProvider;
  }

  @Override
  public SharedViewmodel get() {
    return newInstance(repositoryProvider.get(), dataStoreRepositoryProvider.get());
  }

  public static SharedViewmodel_Factory create(Provider<TaskRepository> repositoryProvider,
      Provider<DataStoreRepository> dataStoreRepositoryProvider) {
    return new SharedViewmodel_Factory(repositoryProvider, dataStoreRepositoryProvider);
  }

  public static SharedViewmodel newInstance(TaskRepository repository,
      DataStoreRepository dataStoreRepository) {
    return new SharedViewmodel(repository, dataStoreRepository);
  }
}
